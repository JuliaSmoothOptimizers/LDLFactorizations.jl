var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [LDLFactorizations]","category":"page"},{"location":"reference/#LDLFactorizations.LDLFactorization","page":"Reference","title":"LDLFactorizations.LDLFactorization","text":"Type that contains the LDLᵀ factorization of a matrix.\n\nThe components of the factorization can be accessed via getproperty:\n\nLDL.L: L sparse lower triangular factor of the factorization without the diagonal    of ones that is removed to save space\nLDL.D: D diagonal matrix of the factorization.\n\nIn order to avoid zero pivots during the factorization, the user can regularize the matrix by modifying  LDL.r1 for the LDL.n_d first pivots and LDL.r2 for the other pivots with tolerance LDL.tol.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Base.:--Union{Tuple{LDLFactorizations.LDLFactorization{Tf, Ti, Tn, Tp}}, Tuple{Tp}, Tuple{Tn}, Tuple{Ti}, Tuple{Tf}} where {Tf<:Number, Ti<:Integer, Tn<:Integer, Tp<:Integer}","page":"Reference","title":"Base.:-","text":"-(LDL)\n\nUnary minus operator returns an LDLFactorization with -LDL.d.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.:\\-Union{Tuple{Tp}, Tuple{Tn}, Tuple{Ti}, Tuple{Tf}, Tuple{T}, Tuple{LDLFactorizations.LDLFactorization{Tf, Ti, Tn, Tp}, AbstractVector{T}}} where {T<:Number, Tf<:Number, Ti<:Integer, Tn<:Integer, Tp<:Integer}","page":"Reference","title":"Base.:\\","text":"x = LDL \\ b\n\nIf LDL is the LDLᵀ factorization of A, solves A x = b.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LDLFactorizations.col_num!-NTuple{6, Any}","page":"Reference","title":"LDLFactorizations.col_num!","text":"col_num!(n, Ap, Ai, Ci, w, Pinv)\n\nCompute the rowval and values of missing elements of the upper triangle of PAPt. Nonzero elements have to verify Pinv[i] ≥ Pinv[j] where i is the row index and j the column index. Those elements are the nonzeros of the lower triangle of A that will be in the upper triangle of PAPt (after permutation)\n\nArguments\n\nn::Ti: number of columns of the matrix\nAp::Vector{Ti}: colptr of the matrix to factorize (CSC format)\nAi::Vector{Ti}: rowval of the matrix to factorize (CSC format)\nCi::Vector{Ti}: rowval of the lower triangle\nw::Vector{Ti}: work array\nPinv::Vector{Ti}: inverse permutation of P. PAPt is the matrix to factorize (CSC format)\n\n\n\n\n\n","category":"method"},{"location":"reference/#LDLFactorizations.col_symb!-NTuple{6, Any}","page":"Reference","title":"LDLFactorizations.col_symb!","text":"col_symb!(n, Ap, Ai, Cp, w, Pinv)\n\nCompute the sparse structure of missing elements of the upper triangle of PAPt. Nonzero elements have to verify Pinv[i] < Pinv[j] where i is the row index and j the column index. Those elements are the nonzeros of the lower triangle of A that will be in the upper triangle of PAPt (after permutation)\n\nArguments\n\nn::Ti: number of columns of the matrix\nAp::Vector{Ti}: colptr of the matrix to factorize (CSC format)\nAi::Vector{Ti}: rowval of the matrix to factorize (CSC format)\nCp::Vector{Ti}: colptr of the lower triangle (to be modified)\nw::Vector{Ti}: work array\nPinv::Vector{Ti}: inverse permutation of P. PAPt is the matrix to factorize (CSC format)\n\n\n\n\n\n","category":"method"},{"location":"reference/#LDLFactorizations.factorized-Union{Tuple{LDLFactorizations.LDLFactorization{T, Ti, Tn, Tp}}, Tuple{Tp}, Tuple{Tn}, Tuple{Ti}, Tuple{T}} where {T<:Number, Ti<:Integer, Tn<:Integer, Tp<:Integer}","page":"Reference","title":"LDLFactorizations.factorized","text":"isfact = factorized(LDL)\n\nReturns true if the most recent factorization stored in LDL LDLFactorization succeeded.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LDLFactorizations.ldl","page":"Reference","title":"LDLFactorizations.ldl","text":"S = ldl(A, Tf; P = amd(A))\nS = ldl(A; P = amd(A))\nS = ldl(A)\n\nCompute the LDLᵀ factorization of the matrix A with permutation vector P (uses an AMD permutation by default). Tf should be the element type of the factors, and is set to eltype(A) if not provided. This function is equivalent to:\n\nS = ldl_analyze(A)\nldl_factorize!(A, S)\n\nA should either be a upper triangular matrix wrapped with LinearAlgebra's Symmetric / Hermitian type, or a symmetric / hermitian matrix (not wrapped with Symmetric / Hermitian).\n\nUsing a non upper triangular matrix wrapped with Symmetric or Hermitian will not give the LDLᵀ factorization of A.\n\nExample\n\nA = sprand(Float64, 10, 10, 0.2)\nAs = Symmetric(triu(A * A' + I), :U)\nLDL = ldl(As) # LDL in Float64\nLDL = ldl(As, Float32) # LDL in Float64\n\n\n\n\n\n","category":"function"},{"location":"reference/#LDLFactorizations.ldl_analyze","page":"Reference","title":"LDLFactorizations.ldl_analyze","text":"LDL = ldl_analyze(A, Tf; P = amd(A))\nLDL = ldl_analyze(A; P = amd(A))\nLDL = ldl_analyze(A)\n\nPerform symbolic analysis of the matrix A with permutation vector P (uses an AMD permutation by default) so it can be reused. Tf should be the element type of the factors, and is set to eltype(A) if not provided. A should be a upper triangular matrix wrapped with LinearAlgebra's Symmetric / Hermitian type.\n\nExample\n\nA = sprand(Float64, 10, 10, 0.2)\nAs = Symmetric(triu(A * A' + I), :U)\nLDL = ldl_analyze(As) # LDL in Float64\nLDL = ldl_analyze(As, Float32) # LDL in Float64\n\n\n\n\n\n","category":"function"},{"location":"reference/#LDLFactorizations.ldl_factorize!","page":"Reference","title":"LDLFactorizations.ldl_factorize!","text":"ldl_factorize!(A, S)\n\nFactorize A into the S LDLFactorization struct.\n\n\n\n\n\n","category":"function"},{"location":"reference/#LinearAlgebra.ldiv!-Union{Tuple{Tp}, Tuple{Tn}, Tuple{Ti}, Tuple{Tf}, Tuple{T}, Tuple{AbstractVector{T}, LDLFactorizations.LDLFactorization{Tf, Ti, Tn, Tp}, AbstractVector{T}}} where {T<:Number, Tf<:Number, Ti<:Integer, Tn<:Integer, Tp<:Integer}","page":"Reference","title":"LinearAlgebra.ldiv!","text":"ldiv!(y, LDL, b)\n\nIf LDL is the LDLᵀ factorization of A, solves A x = b In place.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LinearAlgebra.ldiv!-Union{Tuple{Tp}, Tuple{Tn}, Tuple{Ti}, Tuple{Tf}, Tuple{T}, Tuple{LDLFactorizations.LDLFactorization{Tf, Ti, Tn, Tp}, AbstractVector{T}}} where {T<:Number, Tf<:Number, Ti<:Integer, Tn<:Integer, Tp<:Integer}","page":"Reference","title":"LinearAlgebra.ldiv!","text":"ldiv!(LDL, b)\n\nIf LDL is the LDLᵀ factorization of A, solves A x = b and overwrites b with x.\n\n\n\n\n\n","category":"method"},{"location":"#LDLFactorizations.jl","page":"Home","title":"LDLFactorizations.jl","text":"","category":"section"},{"location":"#Bug-reports-and-discussions","page":"Home","title":"Bug reports and discussions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want to ask a question not suited for a bug report, feel free to start a discussion here. This forum is for general discussion about this repository and the JuliaSmoothOptimizers organization, so questions about any of our packages are welcome.","category":"page"},{"location":"tutorial/#LDLFactorizations.jl-Tutorial","page":"Tutorial","title":"LDLFactorizations.jl Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can check an Introduction to LDLFactorizations.jl on our site, JuliaSmoothOptimizers.","category":"page"}]
}
